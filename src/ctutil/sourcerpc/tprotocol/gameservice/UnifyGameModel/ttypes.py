#
# Autogenerated by Thrift Compiler (0.10.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
import sys

from thrift.transport import TTransport


class UnifyGameInfoProtoc(object):
    """
    游戏结构体（新版）


    Attributes:
     - appId
     - classID
     - codeName
     - gameCost
     - countyID
     - gameID
     - gameKind
     - gameName
     - osType
     - publishKind
     - terminalMode
     - gameMode
    """

    thrift_spec = None

    def __init__(self, appId=None, classID=None, codeName=None, gameCost=None, countyID=None, gameID=None, gameKind=None, gameName=None, osType=None, publishKind=None, terminalMode=None, gameMode=None,):
        self.appId = appId
        self.classID = classID
        self.codeName = codeName
        self.gameCost = gameCost
        self.countyID = countyID
        self.gameID = gameID
        self.gameKind = gameKind
        self.gameName = gameName
        self.osType = osType
        self.publishKind = publishKind
        self.terminalMode = terminalMode
        self.gameMode = gameMode

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == -1:
                if ftype == TType.I32:
                    self.appId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == -2:
                if ftype == TType.I32:
                    self.classID = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == -3:
                if ftype == TType.STRING:
                    self.codeName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == -4:
                if ftype == TType.I32:
                    self.gameCost = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == -5:
                if ftype == TType.STRING:
                    self.countyID = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == -6:
                if ftype == TType.I32:
                    self.gameID = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == -7:
                if ftype == TType.I32:
                    self.gameKind = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == -8:
                if ftype == TType.STRING:
                    self.gameName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == -9:
                if ftype == TType.I32:
                    self.osType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == -10:
                if ftype == TType.I32:
                    self.publishKind = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == -11:
                if ftype == TType.STRING:
                    self.terminalMode = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == -12:
                if ftype == TType.STRING:
                    self.gameMode = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('UnifyGameInfoProtoc')
        if self.gameMode is not None:
            oprot.writeFieldBegin('gameMode', TType.STRING, -12)
            oprot.writeString(self.gameMode.encode('utf-8') if sys.version_info[0] == 2 else self.gameMode)
            oprot.writeFieldEnd()
        if self.terminalMode is not None:
            oprot.writeFieldBegin('terminalMode', TType.STRING, -11)
            oprot.writeString(self.terminalMode.encode('utf-8') if sys.version_info[0] == 2 else self.terminalMode)
            oprot.writeFieldEnd()
        if self.publishKind is not None:
            oprot.writeFieldBegin('publishKind', TType.I32, -10)
            oprot.writeI32(self.publishKind)
            oprot.writeFieldEnd()
        if self.osType is not None:
            oprot.writeFieldBegin('osType', TType.I32, -9)
            oprot.writeI32(self.osType)
            oprot.writeFieldEnd()
        if self.gameName is not None:
            oprot.writeFieldBegin('gameName', TType.STRING, -8)
            oprot.writeString(self.gameName.encode('utf-8') if sys.version_info[0] == 2 else self.gameName)
            oprot.writeFieldEnd()
        if self.gameKind is not None:
            oprot.writeFieldBegin('gameKind', TType.I32, -7)
            oprot.writeI32(self.gameKind)
            oprot.writeFieldEnd()
        if self.gameID is not None:
            oprot.writeFieldBegin('gameID', TType.I32, -6)
            oprot.writeI32(self.gameID)
            oprot.writeFieldEnd()
        if self.countyID is not None:
            oprot.writeFieldBegin('countyID', TType.STRING, -5)
            oprot.writeString(self.countyID.encode('utf-8') if sys.version_info[0] == 2 else self.countyID)
            oprot.writeFieldEnd()
        if self.gameCost is not None:
            oprot.writeFieldBegin('gameCost', TType.I32, -4)
            oprot.writeI32(self.gameCost)
            oprot.writeFieldEnd()
        if self.codeName is not None:
            oprot.writeFieldBegin('codeName', TType.STRING, -3)
            oprot.writeString(self.codeName.encode('utf-8') if sys.version_info[0] == 2 else self.codeName)
            oprot.writeFieldEnd()
        if self.classID is not None:
            oprot.writeFieldBegin('classID', TType.I32, -2)
            oprot.writeI32(self.classID)
            oprot.writeFieldEnd()
        if self.appId is not None:
            oprot.writeFieldBegin('appId', TType.I32, -1)
            oprot.writeI32(self.appId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
