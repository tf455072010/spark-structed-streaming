#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.10.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
if sys.version_info[0] > 2:
    from urllib.parse import urlparse
else:
    from urlparse import urlparse
from thrift.transport import TTransport, TSocket, TSSLSocket, THttpClient
from thrift.protocol.TBinaryProtocol import TBinaryProtocol

from ctutil.sourcerpc.tprotocol.areaserver.AreaService import AreaService
from ctutil.sourcerpc.tprotocol.areaserver.AreaService.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
    print('')
    print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] [-novalidate] [-ca_certs certs] [-keyfile keyfile] [-certfile certfile] function [arg1 [arg2...]]')
    print('')
    print('Functions:')
    print('  bool authorize(string authkey)')
    print('  AreaProtoc ip2area(string ip)')
    print('   ips2area( ips)')
    print('  AreaProtoc address2area(string province, string city, string district)')
    print('  AreaProtoc loc2area(double lng, double lat)')
    print('   listProvinces()')
    print('  ProvinceProtoc getProvince(string provinceID)')
    print('   listCities()')
    print('  CityProtoc getCity(string cityID)')
    print('   listDistricts()')
    print('  DistrictProtoc getDistrict(string districtID)')
    print('   listIp()')
    print('')
    sys.exit(0)

pp = pprint.PrettyPrinter(indent=2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
validate = True
ca_certs = None
keyfile = None
certfile = None
http = False
argi = 1

if sys.argv[argi] == '-h':
    parts = sys.argv[argi + 1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    argi += 2

if sys.argv[argi] == '-u':
    url = urlparse(sys.argv[argi + 1])
    parts = url[1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    else:
        port = 80
    uri = url[2]
    if url[4]:
        uri += '?%s' % url[4]
    http = True
    argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
    framed = True
    argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
    ssl = True
    argi += 1

if sys.argv[argi] == '-novalidate':
    validate = False
    argi += 1

if sys.argv[argi] == '-ca_certs':
    ca_certs = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-keyfile':
    keyfile = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-certfile':
    certfile = sys.argv[argi+1]
    argi += 2

cmd = sys.argv[argi]
args = sys.argv[argi + 1:]

if http:
    transport = THttpClient.THttpClient(host, port, uri)
else:
    if ssl:
        socket = TSSLSocket.TSSLSocket(host, port, validate=validate, ca_certs=ca_certs, keyfile=keyfile, certfile=certfile)
    else:
        socket = TSocket.TSocket(host, port)
    if framed:
        transport = TTransport.TFramedTransport(socket)
    else:
        transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol(transport)
client = AreaService.Client(protocol)
transport.open()

if cmd == 'authorize':
    if len(args) != 1:
        print('authorize requires 1 args')
        sys.exit(1)
    pp.pprint(client.authorize(args[0],))

elif cmd == 'ip2area':
    if len(args) != 1:
        print('ip2area requires 1 args')
        sys.exit(1)
    pp.pprint(client.ip2area(args[0],))

elif cmd == 'ips2area':
    if len(args) != 1:
        print('ips2area requires 1 args')
        sys.exit(1)
    pp.pprint(client.ips2area(eval(args[0]),))

elif cmd == 'address2area':
    if len(args) != 3:
        print('address2area requires 3 args')
        sys.exit(1)
    pp.pprint(client.address2area(args[0], args[1], args[2],))

elif cmd == 'loc2area':
    if len(args) != 2:
        print('loc2area requires 2 args')
        sys.exit(1)
    pp.pprint(client.loc2area(eval(args[0]), eval(args[1]),))

elif cmd == 'listProvinces':
    if len(args) != 0:
        print('listProvinces requires 0 args')
        sys.exit(1)
    pp.pprint(client.listProvinces())

elif cmd == 'getProvince':
    if len(args) != 1:
        print('getProvince requires 1 args')
        sys.exit(1)
    pp.pprint(client.getProvince(args[0],))

elif cmd == 'listCities':
    if len(args) != 0:
        print('listCities requires 0 args')
        sys.exit(1)
    pp.pprint(client.listCities())

elif cmd == 'getCity':
    if len(args) != 1:
        print('getCity requires 1 args')
        sys.exit(1)
    pp.pprint(client.getCity(args[0],))

elif cmd == 'listDistricts':
    if len(args) != 0:
        print('listDistricts requires 0 args')
        sys.exit(1)
    pp.pprint(client.listDistricts())

elif cmd == 'getDistrict':
    if len(args) != 1:
        print('getDistrict requires 1 args')
        sys.exit(1)
    pp.pprint(client.getDistrict(args[0],))

elif cmd == 'listIp':
    if len(args) != 0:
        print('listIp requires 0 args')
        sys.exit(1)
    pp.pprint(client.listIp())

else:
    print('Unrecognized method %s' % cmd)
    sys.exit(1)

transport.close()
