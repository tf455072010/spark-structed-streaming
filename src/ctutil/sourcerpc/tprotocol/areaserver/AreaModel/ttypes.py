#
# Autogenerated by Thrift Compiler (0.10.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
# src\ctutil\sourcerpc\tprotocol\areaserver\AreaModel\ttypess.py

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
import sys

from thrift.transport import TTransport


class IpProtoc(object):
    """
    Attributes:
     - ipStart
     - ipEnd
     - cityID
    """

    thrift_spec = None

    def __init__(self, ipStart=None, ipEnd=None, cityID=None,):
        self.ipStart = ipStart
        self.ipEnd = ipEnd
        self.cityID = cityID

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == -1:
                if ftype == TType.I64:
                    self.ipStart = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == -2:
                if ftype == TType.I64:
                    self.ipEnd = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == -3:
                if ftype == TType.STRING:
                    self.cityID = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('IpProtoc')
        if self.cityID is not None:
            oprot.writeFieldBegin('cityID', TType.STRING, -3)
            oprot.writeString(self.cityID.encode('utf-8') if sys.version_info[0] == 2 else self.cityID)
            oprot.writeFieldEnd()
        if self.ipEnd is not None:
            oprot.writeFieldBegin('ipEnd', TType.I64, -2)
            oprot.writeI64(self.ipEnd)
            oprot.writeFieldEnd()
        if self.ipStart is not None:
            oprot.writeFieldBegin('ipStart', TType.I64, -1)
            oprot.writeI64(self.ipStart)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ProvinceProtoc(object):
    """
    省份信息


    Attributes:
     - provinceID
     - provinceName
    """

    thrift_spec = None

    def __init__(self, provinceID=None, provinceName=None,):
        self.provinceID = provinceID
        self.provinceName = provinceName

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == -1:
                if ftype == TType.STRING:
                    self.provinceID = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == -2:
                if ftype == TType.STRING:
                    self.provinceName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('ProvinceProtoc')
        if self.provinceName is not None:
            oprot.writeFieldBegin('provinceName', TType.STRING, -2)
            oprot.writeString(self.provinceName.encode('utf-8') if sys.version_info[0] == 2 else self.provinceName)
            oprot.writeFieldEnd()
        if self.provinceID is not None:
            oprot.writeFieldBegin('provinceID', TType.STRING, -1)
            oprot.writeString(self.provinceID.encode('utf-8') if sys.version_info[0] == 2 else self.provinceID)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class CityProtoc(object):
    """
    地级市信息


    Attributes:
     - provinceID
     - provinceName
     - cityID
     - cityName
    """

    thrift_spec = None

    def __init__(self, provinceID=None, provinceName=None, cityID=None, cityName=None,):
        self.provinceID = provinceID
        self.provinceName = provinceName
        self.cityID = cityID
        self.cityName = cityName

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == -1:
                if ftype == TType.STRING:
                    self.provinceID = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == -2:
                if ftype == TType.STRING:
                    self.provinceName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == -3:
                if ftype == TType.STRING:
                    self.cityID = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == -4:
                if ftype == TType.STRING:
                    self.cityName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('CityProtoc')
        if self.cityName is not None:
            oprot.writeFieldBegin('cityName', TType.STRING, -4)
            oprot.writeString(self.cityName.encode('utf-8') if sys.version_info[0] == 2 else self.cityName)
            oprot.writeFieldEnd()
        if self.cityID is not None:
            oprot.writeFieldBegin('cityID', TType.STRING, -3)
            oprot.writeString(self.cityID.encode('utf-8') if sys.version_info[0] == 2 else self.cityID)
            oprot.writeFieldEnd()
        if self.provinceName is not None:
            oprot.writeFieldBegin('provinceName', TType.STRING, -2)
            oprot.writeString(self.provinceName.encode('utf-8') if sys.version_info[0] == 2 else self.provinceName)
            oprot.writeFieldEnd()
        if self.provinceID is not None:
            oprot.writeFieldBegin('provinceID', TType.STRING, -1)
            oprot.writeString(self.provinceID.encode('utf-8') if sys.version_info[0] == 2 else self.provinceID)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class DistrictProtoc(object):
    """
    县区信息


    Attributes:
     - provinceID
     - provinceName
     - cityID
     - cityName
     - districtID
     - districtName
    """

    thrift_spec = None

    def __init__(self, provinceID=None, provinceName=None, cityID=None, cityName=None, districtID=None, districtName=None,):
        self.provinceID = provinceID
        self.provinceName = provinceName
        self.cityID = cityID
        self.cityName = cityName
        self.districtID = districtID
        self.districtName = districtName

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == -1:
                if ftype == TType.STRING:
                    self.provinceID = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == -2:
                if ftype == TType.STRING:
                    self.provinceName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == -3:
                if ftype == TType.STRING:
                    self.cityID = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == -4:
                if ftype == TType.STRING:
                    self.cityName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == -5:
                if ftype == TType.STRING:
                    self.districtID = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == -6:
                if ftype == TType.STRING:
                    self.districtName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('DistrictProtoc')
        if self.districtName is not None:
            oprot.writeFieldBegin('districtName', TType.STRING, -6)
            oprot.writeString(self.districtName.encode('utf-8') if sys.version_info[0] == 2 else self.districtName)
            oprot.writeFieldEnd()
        if self.districtID is not None:
            oprot.writeFieldBegin('districtID', TType.STRING, -5)
            oprot.writeString(self.districtID.encode('utf-8') if sys.version_info[0] == 2 else self.districtID)
            oprot.writeFieldEnd()
        if self.cityName is not None:
            oprot.writeFieldBegin('cityName', TType.STRING, -4)
            oprot.writeString(self.cityName.encode('utf-8') if sys.version_info[0] == 2 else self.cityName)
            oprot.writeFieldEnd()
        if self.cityID is not None:
            oprot.writeFieldBegin('cityID', TType.STRING, -3)
            oprot.writeString(self.cityID.encode('utf-8') if sys.version_info[0] == 2 else self.cityID)
            oprot.writeFieldEnd()
        if self.provinceName is not None:
            oprot.writeFieldBegin('provinceName', TType.STRING, -2)
            oprot.writeString(self.provinceName.encode('utf-8') if sys.version_info[0] == 2 else self.provinceName)
            oprot.writeFieldEnd()
        if self.provinceID is not None:
            oprot.writeFieldBegin('provinceID', TType.STRING, -1)
            oprot.writeString(self.provinceID.encode('utf-8') if sys.version_info[0] == 2 else self.provinceID)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class AreaProtoc(object):
    """
    地区解析信息


    Attributes:
     - provinceID
     - provinceName
     - cityID
     - cityName
     - districtID
     - districtName
    """

    thrift_spec = None

    def __init__(self, provinceID=None, provinceName=None, cityID=None, cityName=None, districtID=None, districtName=None,):
        self.provinceID = provinceID
        self.provinceName = provinceName
        self.cityID = cityID
        self.cityName = cityName
        self.districtID = districtID
        self.districtName = districtName

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == -1:
                if ftype == TType.STRING:
                    self.provinceID = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == -2:
                if ftype == TType.STRING:
                    self.provinceName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == -3:
                if ftype == TType.STRING:
                    self.cityID = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == -4:
                if ftype == TType.STRING:
                    self.cityName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == -5:
                if ftype == TType.STRING:
                    self.districtID = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == -6:
                if ftype == TType.STRING:
                    self.districtName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('AreaProtoc')
        if self.districtName is not None:
            oprot.writeFieldBegin('districtName', TType.STRING, -6)
            oprot.writeString(self.districtName.encode('utf-8') if sys.version_info[0] == 2 else self.districtName)
            oprot.writeFieldEnd()
        if self.districtID is not None:
            oprot.writeFieldBegin('districtID', TType.STRING, -5)
            oprot.writeString(self.districtID.encode('utf-8') if sys.version_info[0] == 2 else self.districtID)
            oprot.writeFieldEnd()
        if self.cityName is not None:
            oprot.writeFieldBegin('cityName', TType.STRING, -4)
            oprot.writeString(self.cityName.encode('utf-8') if sys.version_info[0] == 2 else self.cityName)
            oprot.writeFieldEnd()
        if self.cityID is not None:
            oprot.writeFieldBegin('cityID', TType.STRING, -3)
            oprot.writeString(self.cityID.encode('utf-8') if sys.version_info[0] == 2 else self.cityID)
            oprot.writeFieldEnd()
        if self.provinceName is not None:
            oprot.writeFieldBegin('provinceName', TType.STRING, -2)
            oprot.writeString(self.provinceName.encode('utf-8') if sys.version_info[0] == 2 else self.provinceName)
            oprot.writeFieldEnd()
        if self.provinceID is not None:
            oprot.writeFieldBegin('provinceID', TType.STRING, -1)
            oprot.writeString(self.provinceID.encode('utf-8') if sys.version_info[0] == 2 else self.provinceID)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
